
class BankAccount:
    accounts = []

    ### CONSTRUCTOR Function - Creates the instance of an OBJECT ###
    def __init__(self, interest_rate, balance):
        self.interest_rate = interest_rate
        self.balance = balance
        BankAccount.accounts.append(self)
        
    def deposit(self, dep_amount):
        self.balance += dep_amount
        return dep_amount
    
#
# yield_interest(self) - 
# increases the account balance by the current balance * the interest rate (as long as the balance is positive)
#
    def yield_interest(self): ### This is my new "yield_interest" method. Signed by Torrey - 3/19/2023 ###
        total_interest = (self.balance * self.interest_rate )
        if self.balance > 0:
            print("You have a positive balance in your bank account, and interest is being calculated.")
            print("One moment please....")
            sum_total = (self.balance + total_interest)
            print(sum_total)
            print("\n")
        else: 
            self.balance < 0
            print("There are insufficient funds to calculate any interest rate accruel.")
            print("Please contact your local branch for assistance.")
            print("\n")
            
    def withdrawal(self, withdrawal_amount):
        if (self.balance - withdrawal_amount) >=0:
            self.balance -= withdrawal_amount
        else: 
            print(f"Insufficient Funds: Charging a $5 Fee")
            self.balance -= 5
        return self.balance

    def display_account_info(self):
        print(f"Balance: {self.balance}")
        print("\n")
        return self.balance
        
    @classmethod
    def print_all_accounts(cls):
        for account in cls.accounts:
            print(account)
            print("\n")
        return account
    
    @classmethod
    def all_balances(cls):
        sum = 0
        # we use cls to refer to the class
        for account in cls.accounts:
            sum += account.balance
        return sum
            
"""
account_1 = BankAccount(.1,10000)
account_2 = BankAccount(.5,5000)
account_3 = BankAccount(2.5,100000)

account_1.deposit(1000).deposit(2000).deposit(8000).withdrawal(1500).display_account_info().yield_interest()
account_2.deposit(100).deposit(100).withdrawal(100).withdrawal(200).withdrawal(200).withdrawal(2000).display_account_info().yield_interest()
account_3.deposit(200000).deposit(300000).withdrawal(115000).display_account_info().yield_interest()


BankAccount.print_all_accounts()
BankAccount.all_balances()


print(account_1.balance)

"""


"""
Create a User class with an __init__ method

Add a make_deposit method to the User class that calls on it's bank account's instance methods.

Add a make_withdrawal method to the User class that calls on it's bank account's instance methods.

Add a display_user_balance method to the User class that displays user's account balance

SENSEI BONUS: Allow a user to have multiple accounts; update methods so the user has to specify which account they are withdrawing or depositing to

SENPAI BONUS: Add a transfer_money(self, amount, other_user) method to the user class that takes an amount and a different User instance, and transfers money from the user's account into another user's account.

"""

class User:
    is_rewards_member = False
    gold_card_points = 0
    population = 0

    ### CONSTRUCTOR Function - Creates the instance of an OBJECT ###
    def __init__(self, first_name, last_name, email, age, member_status, gold_card_points):  
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.age = age
        self.member_status = True
        self.savings = BankAccount(.5,100)  ## Associating the USER account with the BankAccount class

        User.population += 1

    def greeting(self):
        print(f"Hello, My name is + {self.first_name}")

    def display_info(self):
        print(f"First Name: {self.first_name}")
        print(f"Last Name: {self.last_name}")
        print(f"Email: {self.email}")
        print(f"Age: {self.age}")
        print(f"Rewards Member: {self.is_rewards_member}")
        print(f"Spend Points: {self.gold_card_points}")
        print("\n")
        return self

    def make_deposit(self, dep_amount):
        self.account.deposit(dep_amount)
        print(f"This is your account balance: {self.account.balance}")
        return dep_amount

    def make_withdrawal(self, withdrawal_amount):
        self.account.withdrawal(withdrawal_amount)
        print(f"After your withdrawal, Your account balance is: {self.account.balance}")
        return withdrawal_amount

    def display_user_balance(self, account_balance):
        self.account.balance(account_balance)
        print(f"This is your account balance: {self.account.balance}")
        return account_balance 

    def enroll(self):
        self.member_status = True
        print(self.member_status)
        self.gold_card_points = 200
        print(self.gold_card_points)
        print(f"\n")
        return self
    
    def spend_points(self, amount):
        print(self.gold_card_points-amount)
        print(f"\n")
        return amount

# display_info(self) - Have this method print all of the users' details on separate lines.
# enroll(self) - Have this method change the user's member status to True and set their gold card points to 200.
# spend_points(self, amount) - have this method decrease the user's points by the amoun t specified.

#user_1 = User('Bob', 'Smith', 'bs@gmail.com', 41, False, 0)
#user_2 = User('Melissa', 'Wilson', 'mw@gmail.com', 37, False, 0)
# user_3 = User('Abby', 'Johnson', 'aj@gmail.com', 16, False, 0)
# user_4 = User('Lilly', 'Allen', 'la@gmail.com', 10, False, 0)

#user_1.display_info().enroll().spend_points(50)
# user_2.display_info().enroll().spend_points(80)
# user_3.display_info().enroll().spend_points(0)
# user_3.display_info().enroll().spend_points(0)

user_1 = User('Bob', 'Smith', 'bs@gmail.com', 41, False, 0)
user_1.greeting()
user_1 = BankAccount(1.7, 10000)

user_9 = User(first_name='Tony', last_name='Dungy',email='tdungy@bucs.com', age=59, member_status=True, gold_card_points=0)
user_9.greeting()
user_9 = BankAccount(2, 1000000)